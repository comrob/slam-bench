services:
  roscore:
    image: ghcr.io/comrob/slam-bench:latest
    container_name: roscore
    network_mode: "host"
    command: roscore
    healthcheck:
      # This command succeeds only when roscore is running and responsive.
      test: ["CMD", "bash", "-c", "source /app/entrypoints/ros_entrypoint.sh && rostopic list"]
      interval: 1s
      timeout: 3s
      retries: 30

  record_odometry:
    image: ghcr.io/comrob/slam-bench:latest
    init: true
    container_name: record_odometry
    user: "1000:1000"  # Run container as host user
    depends_on:
      roscore:
        condition: service_healthy
    environment:
      - ROS_HOME=/tmp/.ros
      - OUTPUT_FILE_NAME=${OUTPUT_FILE_NAME}
      - OUTPUT_PATH_HOST=${OUTPUT_PATH_HOST}
    volumes:
      - ${OUTPUT_PATH_HOST}:/trajectory_files
    network_mode: "host"
    entrypoint: ["/app/entrypoints/entrypoint_record_odometry.sh"]

  play_bag:
    image: ghcr.io/comrob/slam-bench:latest
    init: true
    container_name: play_bag
    user: "1000:1000"  # Run container as host user
    depends_on:
      roscore:
        condition: service_healthy
    environment:
      - BAGFILES_PATH_HOST=${BAGFILES_PATH_HOST}
      - BAGFILE_NAME=${BAGFILE_NAME:-sensors}
      - ROSBAG_PLAY_RATE=${ROSBAG_PLAY_RATE}
      - TOPICS_FILE=${TOPICS_FILE}
      - ROS_HOME=/tmp/.ros
    volumes:
      - ${BAGFILES_PATH_HOST}:/rosbag_files
    network_mode: "host"
    entrypoint: ["/app/entrypoints/entrypoint_play_bag.sh"]
  
  evaluate_trajectory:
    init: true
    image: ghcr.io/comrob/slam-bench:latest
    container_name: evaluate_trajectory
    user: "1000:1000"  # Run container as host user
    environment:
      - TEST_MODE=${TEST_MODE}
    volumes:
      - ${REFERENCE_TRAJECTORY_FILE_HOST:-/reference_trajectory.txt}:/reference_trajectory.txt
      - ${ESTIMATED_TRAJECTORY_FILE_HOST:-/estimated_trajectory.txt}:/estimated_trajectory.txt
      - ${OUTPUT_PATH_HOST:-/evaluation_output}:/evaluation_output
    entrypoint: ["/app/entrypoints/entrypoint_evaluate.sh"]
  
  run_slam_nvidia:
    image: ${SLAM_IMAGE:-$CRL_SLAM_IMAGE}
    container_name: run_slam_nvidia
    network_mode: "host"
    depends_on:
      roscore:
        condition: service_healthy
    deploy:
      resources:
        reservations:
          devices:
            - driver: nvidia
              count: all
              capabilities: [gpu]
    volumes:
      - /tmp/.X11-unix:/tmp/.X11-unix
      - ${SLAM_CONFIG_OVERRIDE_FILE:-/dev/null}:/config/override.yaml
    environment:
      - DISPLAY=${DISPLAY}
      - NVIDIA_VISIBLE_DEVICES=all
      - NVIDIA_DRIVER_CAPABILITIES=compute,utility
  
  run_slam:
    image: ${SLAM_IMAGE:-$CRL_SLAM_IMAGE}
    container_name: run_slam
    network_mode: "host"
    depends_on:
      roscore:
        condition: service_healthy
    volumes:
      - /tmp/.X11-unix:/tmp/.X11-unix
      - ${SLAM_CONFIG_OVERRIDE_FILE:-./config/slam/override_config.yaml.example}:/config/override.yaml
    environment:
      - DISPLAY=${DISPLAY}
  
